CREATE VIEW Reisestatistik AS 
(SELECT m.mID, m.Name, count(mID) as AnzahlderReisen FROM Mitglieder as  m, nimmtteil as nt 
WHERE m.mID = nt.Mitglied AND m.mid NOT IN (SELECT Mitglied FROM 
hatkonsumiert as h) GROUP BY m.mid, m.name HAVING count(mid) > 5);


CREATE VIEW MitgliederReisen AS
(SELECT m.mid, m.name, r.rid, r.ziel, r.hotel FROM Mitglieder as m, Reisen as r, nimmtteil as nt
WHERE m.mid = nt.Mitglied AND r.rid = nt.reise);


CREATE RULE _insertMitgliederReisen AS ON INSERT TO MitgliederReisen DO INSTEAD
(INSERT INTO Mitglieder(mID, name) values (new.mID, new.name);
insert into Reisen(rID, ziel, hotel) values (new.rID, new.ziel, new.hotel);
INSERT INTO nimmtteil(mitglied, reise) values(new.mid, new.rid));


ALTER TABLE Mitglieder add aktiv BOOLEAN DEFAULT TRUE;
CREATE RULE _noDeleteOnMitglieder AS ON DELETE TO Mitglieder DO INSTEAD
UPDATE Mitglieder SET aktiv=false WHERE name = old.name OR mID = old.mID;


ALTER TABLE hatkonsumiert ADD COLUMN gesamt numeric(5,2); 


CREATE OR REPLACE FUNCTION fill_amount() 
	RETURNS INT AS $$
	DECLARE
		curs CURSOR IS SELECT * FROM hatkonsumiert as k, hatpreis as p WHERE k.gasthof=p.gasthof AND k.getraenk=p.getraenk for update ;
		i INT:=0;
		rec RECORD;
	BEGIN 
		OPEN curs;
			LOOP
				FETCH NEXT FROM curs into rec;
				IF NOT FOUND THEN EXIT; 
				END IF;
				UPDATE hatkonsumiert SET gesamt= rec.anzahl * rec.preis WHERE CURRENT OF curs;
				i:=i+1;
			END LOOP;
		CLOSE curs;
		RETURN i;
	END; 
	$$ LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION calculate_bill() 
	RETURNS trigger AS $$
	DECLARE
		price hatpreis.preis%type;
	BEGIN 
		SELECT preis into price FROM hatpreis as h WHERE NEW.gasthof = h.gasthof AND NEW.getraenk = h.getraenk;
		RAISE NOTICE '%', price;
		NEW.gesamt = price * NEW.anzahl;
		UPDATE hatkonsumiert SET gesamt = NEW.gesamt WHERE NEW.mitglied = mitglied AND NEW.am = am AND NEW.gasthof = gasthof AND NEW.getraenk = getraenk;
		RETURN NULL;
		END; 
	$$ LANGUAGE 'plpgsql';

	CREATE TRIGGER bill_calculator AFTER INSERT or UPDATE ON hatkonsumiert
			FOR EACH ROW EXECUTE PROCEDURE calculate_bill();


CREATE OR REPLACE FUNCTION occupancy() RETURNS void AS $$
	DECLARE
	r record;
	BEGIN
		RAISE NOTICE 'M1, M2, Anz';
		for r in select Mitglied1, Mitglied2, count(*) as Anzahl from( select distinct greatest(mitglied1, mitglied2) as Mitglied1, least(mitglied1, mitglied2) as Mitglied2, reise from istimdoppelzimmer ) as tmp group by Mitglied1, Mitglied2 loop
		raise NOTICE '%, %, %', r.Mitglied1, r.Mitglied2, r.Anzahl;
end loop;
	END;
$$ LANGUAGE plpgsql;

